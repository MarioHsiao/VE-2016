//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AIMS.Libraries.Scripting.NRefactory.Ast
{
    using System;
    using System.Collections.Generic;


    public class AddHandlerStatement : Statement
    {
        private Expression _eventExpression;

        private Expression _handlerExpression;

        public Expression EventExpression
        {
            get
            {
                return _eventExpression;
            }
            set
            {
                _eventExpression = value ?? Expression.Null;
                if (!_eventExpression.IsNull) _eventExpression.Parent = this;
            }
        }

        public Expression HandlerExpression
        {
            get
            {
                return _handlerExpression;
            }
            set
            {
                _handlerExpression = value ?? Expression.Null;
                if (!_handlerExpression.IsNull) _handlerExpression.Parent = this;
            }
        }

        public AddHandlerStatement(Expression eventExpression, Expression handlerExpression)
        {
            EventExpression = eventExpression;
            HandlerExpression = handlerExpression;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitAddHandlerStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[AddHandlerStatement EventExpression={0} HandlerExpression={1}]", EventExpression, HandlerExpression);
        }
    }

    public class AddressOfExpression : Expression
    {
        private Expression _expression;

        public Expression Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                _expression = value ?? Expression.Null;
                if (!_expression.IsNull) _expression.Parent = this;
            }
        }

        public AddressOfExpression(Expression expression)
        {
            Expression = expression;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitAddressOfExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[AddressOfExpression Expression={0}]", Expression);
        }
    }

    public class AnonymousMethodExpression : Expression
    {
        private List<ParameterDeclarationExpression> _parameters;

        private BlockStatement _body;

        private bool _hasParameterList;

        public List<ParameterDeclarationExpression> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                _parameters = value ?? new List<ParameterDeclarationExpression>();
            }
        }

        public BlockStatement Body
        {
            get
            {
                return _body;
            }
            set
            {
                _body = value ?? BlockStatement.Null;
                if (!_body.IsNull) _body.Parent = this;
            }
        }

        public bool HasParameterList
        {
            get
            {
                return _hasParameterList;
            }
            set
            {
                _hasParameterList = value;
            }
        }

        public AnonymousMethodExpression()
        {
            _parameters = new List<ParameterDeclarationExpression>();
            _body = BlockStatement.Null;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitAnonymousMethodExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[AnonymousMethodExpression Parameters={0} Body={1} HasParameterList={2}]", GetCollectionString(Parameters), Body, HasParameterList);
        }
    }

    public class ArrayCreateExpression : Expression
    {
        private TypeReference _createType;

        private List<Expression> _arguments;

        private ArrayInitializerExpression _arrayInitializer;

        public TypeReference CreateType
        {
            get
            {
                return _createType;
            }
            set
            {
                _createType = value ?? TypeReference.Null;
            }
        }

        public List<Expression> Arguments
        {
            get
            {
                return _arguments;
            }
            set
            {
                _arguments = value ?? new List<Expression>();
            }
        }

        public ArrayInitializerExpression ArrayInitializer
        {
            get
            {
                return _arrayInitializer;
            }
            set
            {
                _arrayInitializer = value ?? ArrayInitializerExpression.Null;
                if (!_arrayInitializer.IsNull) _arrayInitializer.Parent = this;
            }
        }

        public ArrayCreateExpression(TypeReference createType)
        {
            CreateType = createType;
            _arguments = new List<Expression>();
            _arrayInitializer = ArrayInitializerExpression.Null;
        }

        public ArrayCreateExpression(TypeReference createType, List<Expression> arguments)
        {
            CreateType = createType;
            Arguments = arguments;
            _arrayInitializer = ArrayInitializerExpression.Null;
        }

        public ArrayCreateExpression(TypeReference createType, ArrayInitializerExpression arrayInitializer)
        {
            CreateType = createType;
            ArrayInitializer = arrayInitializer;
            _arguments = new List<Expression>();
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitArrayCreateExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ArrayCreateExpression CreateType={0} Arguments={1} ArrayInitializer={2}]", CreateType, GetCollectionString(Arguments), ArrayInitializer);
        }
    }

    public class ArrayInitializerExpression : Expression
    {
        private List<Expression> _createExpressions;

        public List<Expression> CreateExpressions
        {
            get
            {
                return _createExpressions;
            }
            set
            {
                _createExpressions = value ?? new List<Expression>();
            }
        }

        public ArrayInitializerExpression()
        {
            _createExpressions = new List<Expression>();
        }

        public ArrayInitializerExpression(List<Expression> createExpressions)
        {
            CreateExpressions = createExpressions;
        }

        public new static ArrayInitializerExpression Null
        {
            get
            {
                return NullArrayInitializerExpression.Instance;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitArrayInitializerExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ArrayInitializerExpression CreateExpressions={0}]", GetCollectionString(CreateExpressions));
        }
    }

    public class NullArrayInitializerExpression : ArrayInitializerExpression
    {
        private NullArrayInitializerExpression()
        {
        }

        private static NullArrayInitializerExpression s_instance = new NullArrayInitializerExpression();

        public static NullArrayInitializerExpression Instance
        {
            get
            {
                return s_instance;
            }
        }

        public override bool IsNull
        {
            get
            {
                return true;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return null;
        }

        public override string ToString()
        {
            return "[NullArrayInitializerExpression]";
        }
    }

    public class AssignmentExpression : Expression
    {
        private Expression _left;

        private AssignmentOperatorType _op;

        private Expression _right;

        public Expression Left
        {
            get
            {
                return _left;
            }
            set
            {
                _left = value ?? Expression.Null;
                if (!_left.IsNull) _left.Parent = this;
            }
        }

        public AssignmentOperatorType Op
        {
            get
            {
                return _op;
            }
            set
            {
                _op = value;
            }
        }

        public Expression Right
        {
            get
            {
                return _right;
            }
            set
            {
                _right = value ?? Expression.Null;
                if (!_right.IsNull) _right.Parent = this;
            }
        }

        public AssignmentExpression(Expression left, AssignmentOperatorType op, Expression right)
        {
            Left = left;
            Op = op;
            Right = right;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitAssignmentExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[AssignmentExpression Left={0} Op={1} Right={2}]", Left, Op, Right);
        }
    }

    public class Attribute : AbstractNode
    {
        private string _name;

        private List<Expression> _positionalArguments;

        private List<NamedArgumentExpression> _namedArguments;

        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value ?? "";
            }
        }

        public List<Expression> PositionalArguments
        {
            get
            {
                return _positionalArguments;
            }
            set
            {
                _positionalArguments = value ?? new List<Expression>();
            }
        }

        public List<NamedArgumentExpression> NamedArguments
        {
            get
            {
                return _namedArguments;
            }
            set
            {
                _namedArguments = value ?? new List<NamedArgumentExpression>();
            }
        }

        public Attribute(string name, List<Expression> positionalArguments, List<NamedArgumentExpression> namedArguments)
        {
            Name = name;
            PositionalArguments = positionalArguments;
            NamedArguments = namedArguments;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitAttribute(this, data);
        }

        public override string ToString()
        {
            return string.Format("[Attribute Name={0} PositionalArguments={1} NamedArguments={2}]", Name, GetCollectionString(PositionalArguments), GetCollectionString(NamedArguments));
        }
    }

    public abstract class AttributedNode : AbstractNode
    {
        private List<AttributeSection> _attributes;

        private Modifiers _modifier;

        public List<AttributeSection> Attributes
        {
            get
            {
                return _attributes;
            }
            set
            {
                _attributes = value ?? new List<AttributeSection>();
            }
        }

        public Modifiers Modifier
        {
            get
            {
                return _modifier;
            }
            set
            {
                _modifier = value;
            }
        }

        protected AttributedNode(List<AttributeSection> attributes)
        {
            Attributes = attributes;
        }

        protected AttributedNode(Modifiers modifier, List<AttributeSection> attributes)
        {
            Modifier = modifier;
            Attributes = attributes;
        }
    }

    public class AttributeSection : AbstractNode
    {
        private string _attributeTarget;

        private List<AIMS.Libraries.Scripting.NRefactory.Ast.Attribute> _attributes;

        public string AttributeTarget
        {
            get
            {
                return _attributeTarget;
            }
            set
            {
                _attributeTarget = value ?? "";
            }
        }

        public List<AIMS.Libraries.Scripting.NRefactory.Ast.Attribute> Attributes
        {
            get
            {
                return _attributes;
            }
            set
            {
                _attributes = value ?? new List<Attribute>();
            }
        }

        public AttributeSection(string attributeTarget, List<AIMS.Libraries.Scripting.NRefactory.Ast.Attribute> attributes)
        {
            AttributeTarget = attributeTarget;
            Attributes = attributes;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitAttributeSection(this, data);
        }

        public override string ToString()
        {
            return string.Format("[AttributeSection AttributeTarget={0} Attributes={1}]", AttributeTarget, GetCollectionString(Attributes));
        }
    }

    public class BaseReferenceExpression : Expression
    {
        public BaseReferenceExpression()
        {
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitBaseReferenceExpression(this, data);
        }

        public override string ToString()
        {
            return "[BaseReferenceExpression]";
        }
    }

    public class BinaryOperatorExpression : Expression
    {
        private Expression _left;

        private BinaryOperatorType _op;

        private Expression _right;

        public Expression Left
        {
            get
            {
                return _left;
            }
            set
            {
                _left = value ?? Expression.Null;
                if (!_left.IsNull) _left.Parent = this;
            }
        }

        public BinaryOperatorType Op
        {
            get
            {
                return _op;
            }
            set
            {
                _op = value;
            }
        }

        public Expression Right
        {
            get
            {
                return _right;
            }
            set
            {
                _right = value ?? Expression.Null;
                if (!_right.IsNull) _right.Parent = this;
            }
        }

        public BinaryOperatorExpression(Expression left, BinaryOperatorType op, Expression right)
        {
            Left = left;
            Op = op;
            Right = right;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitBinaryOperatorExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[BinaryOperatorExpression Left={0} Op={1} Right={2}]", Left, Op, Right);
        }
    }

    public class BreakStatement : Statement
    {
        public BreakStatement()
        {
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitBreakStatement(this, data);
        }

        public override string ToString()
        {
            return "[BreakStatement]";
        }
    }

    public class CaseLabel : AbstractNode
    {
        private Expression _label;

        private BinaryOperatorType _binaryOperatorType;

        private Expression _toExpression;

        public Expression Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value ?? Expression.Null;
                if (!_label.IsNull) _label.Parent = this;
            }
        }

        public BinaryOperatorType BinaryOperatorType
        {
            get
            {
                return _binaryOperatorType;
            }
            set
            {
                _binaryOperatorType = value;
            }
        }

        public Expression ToExpression
        {
            get
            {
                return _toExpression;
            }
            set
            {
                _toExpression = value ?? Expression.Null;
                if (!_toExpression.IsNull) _toExpression.Parent = this;
            }
        }

        public CaseLabel()
        {
            _label = Expression.Null;
            _toExpression = Expression.Null;
        }

        public CaseLabel(Expression label)
        {
            Label = label;
            _toExpression = Expression.Null;
        }

        public CaseLabel(Expression label, Expression toExpression)
        {
            Label = label;
            ToExpression = toExpression;
        }

        public CaseLabel(BinaryOperatorType binaryOperatorType, Expression label)
        {
            BinaryOperatorType = binaryOperatorType;
            Label = label;
            _toExpression = Expression.Null;
        }

        public bool IsDefault
        {
            get
            {
                return _label.IsNull;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitCaseLabel(this, data);
        }

        public override string ToString()
        {
            return string.Format("[CaseLabel Label={0} BinaryOperatorType={1} ToExpression={2}]", Label, BinaryOperatorType, ToExpression);
        }
    }

    public class CastExpression : Expression
    {
        private TypeReference _castTo;

        private Expression _expression;

        private CastType _castType;

        public TypeReference CastTo
        {
            get
            {
                return _castTo;
            }
            set
            {
                _castTo = value ?? TypeReference.Null;
            }
        }

        public Expression Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                _expression = value ?? Expression.Null;
                if (!_expression.IsNull) _expression.Parent = this;
            }
        }

        public CastType CastType
        {
            get
            {
                return _castType;
            }
            set
            {
                _castType = value;
            }
        }

        public CastExpression(TypeReference castTo)
        {
            CastTo = castTo;
            _expression = Expression.Null;
        }

        public CastExpression(TypeReference castTo, Expression expression, CastType castType)
        {
            CastTo = castTo;
            Expression = expression;
            CastType = castType;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitCastExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[CastExpression CastTo={0} Expression={1} CastType={2}]", CastTo, Expression, CastType);
        }
    }

    public class CatchClause : AbstractNode
    {
        private TypeReference _typeReference;

        private string _variableName;

        private Statement _statementBlock;

        private Expression _condition;

        public TypeReference TypeReference
        {
            get
            {
                return _typeReference;
            }
            set
            {
                _typeReference = value ?? TypeReference.Null;
            }
        }

        public string VariableName
        {
            get
            {
                return _variableName;
            }
            set
            {
                _variableName = value ?? "";
            }
        }

        public Statement StatementBlock
        {
            get
            {
                return _statementBlock;
            }
            set
            {
                _statementBlock = value ?? Statement.Null;
                if (!_statementBlock.IsNull) _statementBlock.Parent = this;
            }
        }

        public Expression Condition
        {
            get
            {
                return _condition;
            }
            set
            {
                _condition = value ?? Expression.Null;
                if (!_condition.IsNull) _condition.Parent = this;
            }
        }

        public CatchClause(TypeReference typeReference, string variableName, Statement statementBlock)
        {
            TypeReference = typeReference;
            VariableName = variableName;
            StatementBlock = statementBlock;
            _condition = Expression.Null;
        }

        public CatchClause(TypeReference typeReference, string variableName, Statement statementBlock, Expression condition)
        {
            TypeReference = typeReference;
            VariableName = variableName;
            StatementBlock = statementBlock;
            Condition = condition;
        }

        public CatchClause(Statement statementBlock)
        {
            StatementBlock = statementBlock;
            _typeReference = TypeReference.Null;
            _variableName = "";
            _condition = Expression.Null;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitCatchClause(this, data);
        }

        public override string ToString()
        {
            return string.Format("[CatchClause TypeReference={0} VariableName={1} StatementBlock={2} Condition={3}]" +
                    "", TypeReference, VariableName, StatementBlock, Condition);
        }
    }

    public class CheckedExpression : Expression
    {
        private Expression _expression;

        public Expression Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                _expression = value ?? Expression.Null;
                if (!_expression.IsNull) _expression.Parent = this;
            }
        }

        public CheckedExpression(Expression expression)
        {
            Expression = expression;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitCheckedExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[CheckedExpression Expression={0}]", Expression);
        }
    }

    public class CheckedStatement : Statement
    {
        private Statement _block;

        public Statement Block
        {
            get
            {
                return _block;
            }
            set
            {
                _block = value ?? Statement.Null;
                if (!_block.IsNull) _block.Parent = this;
            }
        }

        public CheckedStatement(Statement block)
        {
            Block = block;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitCheckedStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[CheckedStatement Block={0}]", Block);
        }
    }

    public class ClassReferenceExpression : Expression
    {
        public ClassReferenceExpression()
        {
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitClassReferenceExpression(this, data);
        }

        public override string ToString()
        {
            return "[ClassReferenceExpression]";
        }
    }

    public class ConditionalExpression : Expression
    {
        private Expression _condition;

        private Expression _trueExpression;

        private Expression _falseExpression;

        public Expression Condition
        {
            get
            {
                return _condition;
            }
            set
            {
                _condition = value ?? Expression.Null;
                if (!_condition.IsNull) _condition.Parent = this;
            }
        }

        public Expression TrueExpression
        {
            get
            {
                return _trueExpression;
            }
            set
            {
                _trueExpression = value ?? Expression.Null;
                if (!_trueExpression.IsNull) _trueExpression.Parent = this;
            }
        }

        public Expression FalseExpression
        {
            get
            {
                return _falseExpression;
            }
            set
            {
                _falseExpression = value ?? Expression.Null;
                if (!_falseExpression.IsNull) _falseExpression.Parent = this;
            }
        }

        public ConditionalExpression(Expression condition, Expression trueExpression, Expression falseExpression)
        {
            Condition = condition;
            TrueExpression = trueExpression;
            FalseExpression = falseExpression;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitConditionalExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ConditionalExpression Condition={0} TrueExpression={1} FalseExpression={2}]", Condition, TrueExpression, FalseExpression);
        }
    }

    public class ConstructorDeclaration : ParametrizedNode
    {
        private ConstructorInitializer _constructorInitializer;

        private BlockStatement _body;

        public ConstructorInitializer ConstructorInitializer
        {
            get
            {
                return _constructorInitializer;
            }
            set
            {
                _constructorInitializer = value ?? ConstructorInitializer.Null;
            }
        }

        public BlockStatement Body
        {
            get
            {
                return _body;
            }
            set
            {
                _body = value ?? BlockStatement.Null;
                if (!_body.IsNull) _body.Parent = this;
            }
        }

        public ConstructorDeclaration(string name, Modifiers modifier, List<ParameterDeclarationExpression> parameters, List<AttributeSection> attributes) :
                base(modifier, attributes, name, parameters)
        {
            _constructorInitializer = ConstructorInitializer.Null;
            _body = BlockStatement.Null;
        }

        public ConstructorDeclaration(string name, Modifiers modifier, List<ParameterDeclarationExpression> parameters, ConstructorInitializer constructorInitializer, List<AttributeSection> attributes) :
                base(modifier, attributes, name, parameters)
        {
            ConstructorInitializer = constructorInitializer;
            _body = BlockStatement.Null;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitConstructorDeclaration(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ConstructorDeclaration ConstructorInitializer={0} Body={1} Name={2} Parameters={" +
                    "3} Attributes={4} Modifier={5}]", ConstructorInitializer, Body, Name, GetCollectionString(Parameters), GetCollectionString(Attributes), Modifier);
        }
    }

    public class ConstructorInitializer : AbstractNode, INullable
    {
        private ConstructorInitializerType _constructorInitializerType;

        private List<Expression> _arguments;

        public ConstructorInitializerType ConstructorInitializerType
        {
            get
            {
                return _constructorInitializerType;
            }
            set
            {
                _constructorInitializerType = value;
            }
        }

        public List<Expression> Arguments
        {
            get
            {
                return _arguments;
            }
            set
            {
                _arguments = value ?? new List<Expression>();
            }
        }

        public ConstructorInitializer()
        {
            _arguments = new List<Expression>();
        }

        public virtual bool IsNull
        {
            get
            {
                return false;
            }
        }

        public static ConstructorInitializer Null
        {
            get
            {
                return NullConstructorInitializer.Instance;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitConstructorInitializer(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ConstructorInitializer ConstructorInitializerType={0} Arguments={1}]", ConstructorInitializerType, GetCollectionString(Arguments));
        }
    }

    public class NullConstructorInitializer : ConstructorInitializer
    {
        private NullConstructorInitializer()
        {
        }

        private static NullConstructorInitializer s_instance = new NullConstructorInitializer();

        public static NullConstructorInitializer Instance
        {
            get
            {
                return s_instance;
            }
        }

        public override bool IsNull
        {
            get
            {
                return true;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return null;
        }

        public override string ToString()
        {
            return "[NullConstructorInitializer]";
        }
    }

    public class ContinueStatement : Statement
    {
        private ContinueType _continueType;

        public ContinueType ContinueType
        {
            get
            {
                return _continueType;
            }
            set
            {
                _continueType = value;
            }
        }

        public ContinueStatement()
        {
        }

        public ContinueStatement(ContinueType continueType)
        {
            ContinueType = continueType;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitContinueStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ContinueStatement ContinueType={0}]", ContinueType);
        }
    }

    public class DeclareDeclaration : ParametrizedNode
    {
        private string _alias;

        private string _library;

        private CharsetModifier _charset;

        private TypeReference _typeReference;

        public string Alias
        {
            get
            {
                return _alias;
            }
            set
            {
                _alias = value ?? "";
            }
        }

        public string Library
        {
            get
            {
                return _library;
            }
            set
            {
                _library = value ?? "";
            }
        }

        public CharsetModifier Charset
        {
            get
            {
                return _charset;
            }
            set
            {
                _charset = value;
            }
        }

        public TypeReference TypeReference
        {
            get
            {
                return _typeReference;
            }
            set
            {
                _typeReference = value ?? TypeReference.Null;
            }
        }

        public DeclareDeclaration(string name, Modifiers modifier, TypeReference typeReference, List<ParameterDeclarationExpression> parameters, List<AttributeSection> attributes, string library, string alias, CharsetModifier charset) :
                base(modifier, attributes, name, parameters)
        {
            TypeReference = typeReference;
            Library = library;
            Alias = alias;
            Charset = charset;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitDeclareDeclaration(this, data);
        }

        public override string ToString()
        {
            return string.Format("[DeclareDeclaration Alias={0} Library={1} Charset={2} TypeReference={3} Name={4} " +
                    "Parameters={5} Attributes={6} Modifier={7}]", Alias, Library, Charset, TypeReference, Name, GetCollectionString(Parameters), GetCollectionString(Attributes), Modifier);
        }
    }

    public class DefaultValueExpression : Expression
    {
        private TypeReference _typeReference;

        public TypeReference TypeReference
        {
            get
            {
                return _typeReference;
            }
            set
            {
                _typeReference = value ?? TypeReference.Null;
            }
        }

        public DefaultValueExpression(TypeReference typeReference)
        {
            TypeReference = typeReference;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitDefaultValueExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[DefaultValueExpression TypeReference={0}]", TypeReference);
        }
    }

    public class DelegateDeclaration : AttributedNode
    {
        private string _name;

        private TypeReference _returnType;

        private List<ParameterDeclarationExpression> _parameters;

        private List<TemplateDefinition> _templates;

        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = string.IsNullOrEmpty(value) ? "?" : value;
            }
        }

        public TypeReference ReturnType
        {
            get
            {
                return _returnType;
            }
            set
            {
                _returnType = value ?? TypeReference.Null;
            }
        }

        public List<ParameterDeclarationExpression> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                _parameters = value ?? new List<ParameterDeclarationExpression>();
            }
        }

        public List<TemplateDefinition> Templates
        {
            get
            {
                return _templates;
            }
            set
            {
                _templates = value ?? new List<TemplateDefinition>();
            }
        }

        public DelegateDeclaration(Modifiers modifier, List<AttributeSection> attributes) :
                base(attributes)
        {
            Modifier = modifier;
            _name = "?";
            _returnType = TypeReference.Null;
            _parameters = new List<ParameterDeclarationExpression>();
            _templates = new List<TemplateDefinition>();
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitDelegateDeclaration(this, data);
        }

        public override string ToString()
        {
            return string.Format("[DelegateDeclaration Name={0} ReturnType={1} Parameters={2} Templates={3} Attribu" +
                    "tes={4} Modifier={5}]", Name, ReturnType, GetCollectionString(Parameters), GetCollectionString(Templates), GetCollectionString(Attributes), Modifier);
        }
    }

    public class DestructorDeclaration : AttributedNode
    {
        private string _name;

        private BlockStatement _body;

        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value ?? "";
            }
        }

        public BlockStatement Body
        {
            get
            {
                return _body;
            }
            set
            {
                _body = value ?? BlockStatement.Null;
                if (!_body.IsNull) _body.Parent = this;
            }
        }

        public DestructorDeclaration(string name, Modifiers modifier, List<AttributeSection> attributes) :
                base(attributes)
        {
            Name = name;
            Modifier = modifier;
            _body = BlockStatement.Null;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitDestructorDeclaration(this, data);
        }

        public override string ToString()
        {
            return string.Format("[DestructorDeclaration Name={0} Body={1} Attributes={2} Modifier={3}]", Name, Body, GetCollectionString(Attributes), Modifier);
        }
    }

    public class DirectionExpression : Expression
    {
        private FieldDirection _fieldDirection;

        private Expression _expression;

        public FieldDirection FieldDirection
        {
            get
            {
                return _fieldDirection;
            }
            set
            {
                _fieldDirection = value;
            }
        }

        public Expression Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                _expression = value ?? Expression.Null;
                if (!_expression.IsNull) _expression.Parent = this;
            }
        }

        public DirectionExpression(FieldDirection fieldDirection, Expression expression)
        {
            FieldDirection = fieldDirection;
            Expression = expression;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitDirectionExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[DirectionExpression FieldDirection={0} Expression={1}]", FieldDirection, Expression);
        }
    }

    public class DoLoopStatement : StatementWithEmbeddedStatement
    {
        private Expression _condition;

        private ConditionType _conditionType;

        private ConditionPosition _conditionPosition;

        public Expression Condition
        {
            get
            {
                return _condition;
            }
            set
            {
                _condition = value ?? Expression.Null;
                if (!_condition.IsNull) _condition.Parent = this;
            }
        }

        public ConditionType ConditionType
        {
            get
            {
                return _conditionType;
            }
            set
            {
                _conditionType = value;
            }
        }

        public ConditionPosition ConditionPosition
        {
            get
            {
                return _conditionPosition;
            }
            set
            {
                _conditionPosition = value;
            }
        }

        public DoLoopStatement(Expression condition, Statement embeddedStatement, ConditionType conditionType, ConditionPosition conditionPosition)
        {
            Condition = condition;
            EmbeddedStatement = embeddedStatement;
            ConditionType = conditionType;
            ConditionPosition = conditionPosition;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitDoLoopStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[DoLoopStatement Condition={0} ConditionType={1} ConditionPosition={2} EmbeddedSt" +
                    "atement={3}]", Condition, ConditionType, ConditionPosition, EmbeddedStatement);
        }
    }

    public class ElseIfSection : StatementWithEmbeddedStatement
    {
        private Expression _condition;

        public Expression Condition
        {
            get
            {
                return _condition;
            }
            set
            {
                _condition = value ?? Expression.Null;
                if (!_condition.IsNull) _condition.Parent = this;
            }
        }

        public ElseIfSection(Expression condition, Statement embeddedStatement)
        {
            Condition = condition;
            EmbeddedStatement = embeddedStatement;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitElseIfSection(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ElseIfSection Condition={0} EmbeddedStatement={1}]", Condition, EmbeddedStatement);
        }
    }

    public class EmptyStatement : Statement
    {
        public EmptyStatement()
        {
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitEmptyStatement(this, data);
        }

        public override string ToString()
        {
            return "[EmptyStatement]";
        }
    }

    public class EndStatement : Statement
    {
        public EndStatement()
        {
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitEndStatement(this, data);
        }

        public override string ToString()
        {
            return "[EndStatement]";
        }
    }

    public class EraseStatement : Statement
    {
        private List<Expression> _expressions;

        public List<Expression> Expressions
        {
            get
            {
                return _expressions;
            }
            set
            {
                _expressions = value ?? new List<Expression>();
            }
        }

        public EraseStatement()
        {
            _expressions = new List<Expression>();
        }

        public EraseStatement(List<Expression> expressions)
        {
            Expressions = expressions;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitEraseStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[EraseStatement Expressions={0}]", GetCollectionString(Expressions));
        }
    }

    public class ErrorStatement : Statement
    {
        private Expression _expression;

        public Expression Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                _expression = value ?? Expression.Null;
                if (!_expression.IsNull) _expression.Parent = this;
            }
        }

        public ErrorStatement(Expression expression)
        {
            Expression = expression;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitErrorStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ErrorStatement Expression={0}]", Expression);
        }
    }

    public class EventAddRegion : EventAddRemoveRegion
    {
        public EventAddRegion(List<AttributeSection> attributes) :
                base(attributes)
        {
        }

        public static EventAddRegion Null
        {
            get
            {
                return NullEventAddRegion.Instance;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitEventAddRegion(this, data);
        }

        public override string ToString()
        {
            return string.Format("[EventAddRegion Block={0} Parameters={1} Attributes={2} Modifier={3}]", Block, GetCollectionString(Parameters), GetCollectionString(Attributes), Modifier);
        }
    }

    public class NullEventAddRegion : EventAddRegion
    {
        private NullEventAddRegion() :
                base(null)
        {
        }

        private static NullEventAddRegion s_instance = new NullEventAddRegion();

        public static NullEventAddRegion Instance
        {
            get
            {
                return s_instance;
            }
        }

        public override bool IsNull
        {
            get
            {
                return true;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return null;
        }

        public override string ToString()
        {
            return "[NullEventAddRegion]";
        }
    }

    public abstract class EventAddRemoveRegion : AttributedNode, INullable
    {
        private BlockStatement _block;

        private List<ParameterDeclarationExpression> _parameters;

        public BlockStatement Block
        {
            get
            {
                return _block;
            }
            set
            {
                _block = value ?? BlockStatement.Null;
                if (!_block.IsNull) _block.Parent = this;
            }
        }

        public List<ParameterDeclarationExpression> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                _parameters = value ?? new List<ParameterDeclarationExpression>();
            }
        }

        protected EventAddRemoveRegion(List<AttributeSection> attributes) :
                base(attributes)
        {
            _block = BlockStatement.Null;
            _parameters = new List<ParameterDeclarationExpression>();
        }

        public virtual bool IsNull
        {
            get
            {
                return false;
            }
        }
    }

    public class EventDeclaration : ParametrizedNode
    {
        private TypeReference _typeReference;

        private List<InterfaceImplementation> _interfaceImplementations;

        private EventAddRegion _addRegion;

        private EventRemoveRegion _removeRegion;

        private EventRaiseRegion _raiseRegion;

        private Location _bodyStart;

        private Location _bodyEnd;

        private Expression _initializer;

        public TypeReference TypeReference
        {
            get
            {
                return _typeReference;
            }
            set
            {
                _typeReference = value ?? TypeReference.Null;
            }
        }

        public List<InterfaceImplementation> InterfaceImplementations
        {
            get
            {
                return _interfaceImplementations;
            }
            set
            {
                _interfaceImplementations = value ?? new List<InterfaceImplementation>();
            }
        }

        public EventAddRegion AddRegion
        {
            get
            {
                return _addRegion;
            }
            set
            {
                _addRegion = value ?? EventAddRegion.Null;
            }
        }

        public EventRemoveRegion RemoveRegion
        {
            get
            {
                return _removeRegion;
            }
            set
            {
                _removeRegion = value ?? EventRemoveRegion.Null;
            }
        }

        public EventRaiseRegion RaiseRegion
        {
            get
            {
                return _raiseRegion;
            }
            set
            {
                _raiseRegion = value ?? EventRaiseRegion.Null;
            }
        }

        public Location BodyStart
        {
            get
            {
                return _bodyStart;
            }
            set
            {
                _bodyStart = value;
            }
        }

        public Location BodyEnd
        {
            get
            {
                return _bodyEnd;
            }
            set
            {
                _bodyEnd = value;
            }
        }

        public Expression Initializer
        {
            get
            {
                return _initializer;
            }
            set
            {
                _initializer = value ?? Expression.Null;
                if (!_initializer.IsNull) _initializer.Parent = this;
            }
        }

        public EventDeclaration(TypeReference typeReference, string name, Modifiers modifier, List<AttributeSection> attributes, List<ParameterDeclarationExpression> parameters) :
                base(modifier, attributes, name, parameters)
        {
            TypeReference = typeReference;
            _interfaceImplementations = new List<InterfaceImplementation>();
            _addRegion = EventAddRegion.Null;
            _removeRegion = EventRemoveRegion.Null;
            _raiseRegion = EventRaiseRegion.Null;
            _bodyStart = Location.Empty;
            _bodyEnd = Location.Empty;
            _initializer = Expression.Null;
        }

        public EventDeclaration(TypeReference typeReference, Modifiers modifier, List<ParameterDeclarationExpression> parameters, List<AttributeSection> attributes, string name, List<InterfaceImplementation> interfaceImplementations) :
                base(modifier, attributes, name, parameters)
        {
            TypeReference = typeReference;
            InterfaceImplementations = interfaceImplementations;
            _addRegion = EventAddRegion.Null;
            _removeRegion = EventRemoveRegion.Null;
            _raiseRegion = EventRaiseRegion.Null;
            _bodyStart = Location.Empty;
            _bodyEnd = Location.Empty;
            _initializer = Expression.Null;
        }

        public bool HasRemoveRegion
        {
            get
            {
                return !_removeRegion.IsNull;
            }
        }

        public bool HasRaiseRegion
        {
            get
            {
                return !_raiseRegion.IsNull;
            }
        }

        public bool HasAddRegion
        {
            get
            {
                return !_addRegion.IsNull;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitEventDeclaration(this, data);
        }

        public override string ToString()
        {
            return string.Format("[EventDeclaration TypeReference={0} InterfaceImplementations={1} AddRegion={2} Re" +
                    "moveRegion={3} RaiseRegion={4} BodyStart={5} BodyEnd={6} Initializer={7} Name={8" +
                    "} Parameters={9} Attributes={10} Modifier={11}]", TypeReference, GetCollectionString(InterfaceImplementations), AddRegion, RemoveRegion, RaiseRegion, BodyStart, BodyEnd, Initializer, Name, GetCollectionString(Parameters), GetCollectionString(Attributes), Modifier);
        }
    }

    public class EventRaiseRegion : EventAddRemoveRegion
    {
        public EventRaiseRegion(List<AttributeSection> attributes) :
                base(attributes)
        {
        }

        public static EventRaiseRegion Null
        {
            get
            {
                return NullEventRaiseRegion.Instance;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitEventRaiseRegion(this, data);
        }

        public override string ToString()
        {
            return string.Format("[EventRaiseRegion Block={0} Parameters={1} Attributes={2} Modifier={3}]", Block, GetCollectionString(Parameters), GetCollectionString(Attributes), Modifier);
        }
    }

    public class NullEventRaiseRegion : EventRaiseRegion
    {
        private NullEventRaiseRegion() :
                base(null)
        {
        }

        private static NullEventRaiseRegion s_instance = new NullEventRaiseRegion();

        public static NullEventRaiseRegion Instance
        {
            get
            {
                return s_instance;
            }
        }

        public override bool IsNull
        {
            get
            {
                return true;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return null;
        }

        public override string ToString()
        {
            return "[NullEventRaiseRegion]";
        }
    }

    public class EventRemoveRegion : EventAddRemoveRegion
    {
        public EventRemoveRegion(List<AttributeSection> attributes) :
                base(attributes)
        {
        }

        public static EventRemoveRegion Null
        {
            get
            {
                return NullEventRemoveRegion.Instance;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitEventRemoveRegion(this, data);
        }

        public override string ToString()
        {
            return string.Format("[EventRemoveRegion Block={0} Parameters={1} Attributes={2} Modifier={3}]", Block, GetCollectionString(Parameters), GetCollectionString(Attributes), Modifier);
        }
    }

    public class NullEventRemoveRegion : EventRemoveRegion
    {
        private NullEventRemoveRegion() :
                base(null)
        {
        }

        private static NullEventRemoveRegion s_instance = new NullEventRemoveRegion();

        public static NullEventRemoveRegion Instance
        {
            get
            {
                return s_instance;
            }
        }

        public override bool IsNull
        {
            get
            {
                return true;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return null;
        }

        public override string ToString()
        {
            return "[NullEventRemoveRegion]";
        }
    }

    public class ExitStatement : Statement
    {
        private ExitType _exitType;

        public ExitType ExitType
        {
            get
            {
                return _exitType;
            }
            set
            {
                _exitType = value;
            }
        }

        public ExitStatement(ExitType exitType)
        {
            ExitType = exitType;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitExitStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ExitStatement ExitType={0}]", ExitType);
        }
    }

    public class ExpressionStatement : Statement
    {
        private Expression _expression;

        public Expression Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                _expression = value ?? Expression.Null;
                if (!_expression.IsNull) _expression.Parent = this;
            }
        }

        public ExpressionStatement(Expression expression)
        {
            Expression = expression;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitExpressionStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ExpressionStatement Expression={0}]", Expression);
        }
    }

    public class FieldDeclaration : AttributedNode
    {
        private TypeReference _typeReference;

        private List<VariableDeclaration> _fields;

        public TypeReference TypeReference
        {
            get
            {
                return _typeReference;
            }
            set
            {
                _typeReference = value ?? TypeReference.Null;
            }
        }

        public List<VariableDeclaration> Fields
        {
            get
            {
                return _fields;
            }
            set
            {
                _fields = value ?? new List<VariableDeclaration>();
            }
        }

        public FieldDeclaration(List<AttributeSection> attributes) :
                base(attributes)
        {
            _typeReference = TypeReference.Null;
            _fields = new List<VariableDeclaration>();
        }

        public FieldDeclaration(List<AttributeSection> attributes, TypeReference typeReference, Modifiers modifier) :
                base(attributes)
        {
            TypeReference = typeReference;
            Modifier = modifier;
            _fields = new List<VariableDeclaration>();
        }


        public VariableDeclaration GetVariableDeclaration(string variableName)
        {
            foreach (VariableDeclaration variableDeclaration in Fields)
            {
                if (variableDeclaration.Name == variableName)
                {
                    return variableDeclaration;
                }
            }
            return null;
        }


        public TypeReference GetTypeForField(int fieldIndex)
        {
            if (!_typeReference.IsNull)
            {
                return _typeReference;
            }
            return ((VariableDeclaration)Fields[fieldIndex]).TypeReference;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitFieldDeclaration(this, data);
        }

        public override string ToString()
        {
            return string.Format("[FieldDeclaration TypeReference={0} Fields={1} Attributes={2} Modifier={3}]", TypeReference, GetCollectionString(Fields), GetCollectionString(Attributes), Modifier);
        }
    }

    public class FieldReferenceExpression : Expression
    {
        private Expression _targetObject;

        private string _fieldName;

        public Expression TargetObject
        {
            get
            {
                return _targetObject;
            }
            set
            {
                _targetObject = value ?? Expression.Null;
                if (!_targetObject.IsNull) _targetObject.Parent = this;
            }
        }

        public string FieldName
        {
            get
            {
                return _fieldName;
            }
            set
            {
                _fieldName = value ?? "";
            }
        }

        public FieldReferenceExpression(Expression targetObject, string fieldName)
        {
            TargetObject = targetObject;
            FieldName = fieldName;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitFieldReferenceExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[FieldReferenceExpression TargetObject={0} FieldName={1}]", TargetObject, FieldName);
        }
    }

    public class FixedStatement : StatementWithEmbeddedStatement
    {
        private TypeReference _typeReference;

        private List<VariableDeclaration> _pointerDeclarators;

        public TypeReference TypeReference
        {
            get
            {
                return _typeReference;
            }
            set
            {
                _typeReference = value ?? TypeReference.Null;
            }
        }

        public List<VariableDeclaration> PointerDeclarators
        {
            get
            {
                return _pointerDeclarators;
            }
            set
            {
                _pointerDeclarators = value ?? new List<VariableDeclaration>();
            }
        }

        public FixedStatement(TypeReference typeReference, List<VariableDeclaration> pointerDeclarators, Statement embeddedStatement)
        {
            TypeReference = typeReference;
            PointerDeclarators = pointerDeclarators;
            EmbeddedStatement = embeddedStatement;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitFixedStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[FixedStatement TypeReference={0} PointerDeclarators={1} EmbeddedStatement={2}]", TypeReference, GetCollectionString(PointerDeclarators), EmbeddedStatement);
        }
    }

    public class ForeachStatement : StatementWithEmbeddedStatement
    {
        private TypeReference _typeReference;

        private string _variableName;

        private Expression _expression;

        private Expression _nextExpression;

        public TypeReference TypeReference
        {
            get
            {
                return _typeReference;
            }
            set
            {
                _typeReference = value ?? TypeReference.Null;
            }
        }

        public string VariableName
        {
            get
            {
                return _variableName;
            }
            set
            {
                _variableName = value ?? "";
            }
        }

        public Expression Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                _expression = value ?? Expression.Null;
                if (!_expression.IsNull) _expression.Parent = this;
            }
        }

        public Expression NextExpression
        {
            get
            {
                return _nextExpression;
            }
            set
            {
                _nextExpression = value ?? Expression.Null;
                if (!_nextExpression.IsNull) _nextExpression.Parent = this;
            }
        }

        public ForeachStatement(TypeReference typeReference, string variableName, Expression expression, Statement embeddedStatement)
        {
            TypeReference = typeReference;
            VariableName = variableName;
            Expression = expression;
            EmbeddedStatement = embeddedStatement;
            _nextExpression = Expression.Null;
        }

        public ForeachStatement(TypeReference typeReference, string variableName, Expression expression, Statement embeddedStatement, Expression nextExpression)
        {
            TypeReference = typeReference;
            VariableName = variableName;
            Expression = expression;
            EmbeddedStatement = embeddedStatement;
            NextExpression = nextExpression;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitForeachStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ForeachStatement TypeReference={0} VariableName={1} Expression={2} NextExpressio" +
                    "n={3} EmbeddedStatement={4}]", TypeReference, VariableName, Expression, NextExpression, EmbeddedStatement);
        }
    }

    public class ForNextStatement : StatementWithEmbeddedStatement
    {
        private Expression _start;

        private Expression _end;

        private Expression _step;

        private List<Expression> _nextExpressions;

        private TypeReference _typeReference;

        private string _variableName;

        public Expression Start
        {
            get
            {
                return _start;
            }
            set
            {
                _start = value ?? Expression.Null;
                if (!_start.IsNull) _start.Parent = this;
            }
        }

        public Expression End
        {
            get
            {
                return _end;
            }
            set
            {
                _end = value ?? Expression.Null;
                if (!_end.IsNull) _end.Parent = this;
            }
        }

        public Expression Step
        {
            get
            {
                return _step;
            }
            set
            {
                _step = value ?? Expression.Null;
                if (!_step.IsNull) _step.Parent = this;
            }
        }

        public List<Expression> NextExpressions
        {
            get
            {
                return _nextExpressions;
            }
            set
            {
                _nextExpressions = value ?? new List<Expression>();
            }
        }

        public TypeReference TypeReference
        {
            get
            {
                return _typeReference;
            }
            set
            {
                _typeReference = value ?? TypeReference.Null;
            }
        }

        public string VariableName
        {
            get
            {
                return _variableName;
            }
            set
            {
                _variableName = value ?? "";
            }
        }

        public ForNextStatement(TypeReference typeReference, string variableName, Expression start, Expression end, Expression step, Statement embeddedStatement, List<Expression> nextExpressions)
        {
            TypeReference = typeReference;
            VariableName = variableName;
            Start = start;
            End = end;
            Step = step;
            EmbeddedStatement = embeddedStatement;
            NextExpressions = nextExpressions;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitForNextStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ForNextStatement Start={0} End={1} Step={2} NextExpressions={3} TypeReference={4" +
                    "} VariableName={5} EmbeddedStatement={6}]", Start, End, Step, GetCollectionString(NextExpressions), TypeReference, VariableName, EmbeddedStatement);
        }
    }

    public class ForStatement : StatementWithEmbeddedStatement
    {
        private List<Statement> _initializers;

        private Expression _condition;

        private List<Statement> _iterator;

        public List<Statement> Initializers
        {
            get
            {
                return _initializers;
            }
            set
            {
                _initializers = value ?? new List<Statement>();
            }
        }

        public Expression Condition
        {
            get
            {
                return _condition;
            }
            set
            {
                _condition = value ?? Expression.Null;
                if (!_condition.IsNull) _condition.Parent = this;
            }
        }

        public List<Statement> Iterator
        {
            get
            {
                return _iterator;
            }
            set
            {
                _iterator = value ?? new List<Statement>();
            }
        }

        public ForStatement(List<Statement> initializers, Expression condition, List<Statement> iterator, Statement embeddedStatement)
        {
            Initializers = initializers;
            Condition = condition;
            Iterator = iterator;
            EmbeddedStatement = embeddedStatement;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitForStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ForStatement Initializers={0} Condition={1} Iterator={2} EmbeddedStatement={3}]", GetCollectionString(Initializers), Condition, GetCollectionString(Iterator), EmbeddedStatement);
        }
    }

    public class GotoCaseStatement : Statement
    {
        private Expression _expression;

        public Expression Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                _expression = value ?? Expression.Null;
                if (!_expression.IsNull) _expression.Parent = this;
            }
        }

        public GotoCaseStatement(Expression expression)
        {
            Expression = expression;
        }

        public bool IsDefaultCase
        {
            get
            {
                return _expression.IsNull;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitGotoCaseStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[GotoCaseStatement Expression={0}]", Expression);
        }
    }

    public class GotoStatement : Statement
    {
        private string _label;

        public string Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value ?? "";
            }
        }

        public GotoStatement(string label)
        {
            Label = label;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitGotoStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[GotoStatement Label={0}]", Label);
        }
    }

    public class IdentifierExpression : Expression
    {
        private string _identifier;

        public string Identifier
        {
            get
            {
                return _identifier;
            }
            set
            {
                _identifier = value ?? "";
            }
        }

        public IdentifierExpression(string identifier)
        {
            Identifier = identifier;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitIdentifierExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[IdentifierExpression Identifier={0}]", Identifier);
        }
    }

    public class IfElseStatement : Statement
    {
        private Expression _condition;

        private List<Statement> _trueStatement;

        private List<Statement> _falseStatement;

        private List<ElseIfSection> _elseIfSections;

        public Expression Condition
        {
            get
            {
                return _condition;
            }
            set
            {
                _condition = value ?? Expression.Null;
                if (!_condition.IsNull) _condition.Parent = this;
            }
        }

        public List<Statement> TrueStatement
        {
            get
            {
                return _trueStatement;
            }
            set
            {
                _trueStatement = value ?? new List<Statement>();
            }
        }

        public List<Statement> FalseStatement
        {
            get
            {
                return _falseStatement;
            }
            set
            {
                _falseStatement = value ?? new List<Statement>();
            }
        }

        public List<ElseIfSection> ElseIfSections
        {
            get
            {
                return _elseIfSections;
            }
            set
            {
                _elseIfSections = value ?? new List<ElseIfSection>();
            }
        }

        public IfElseStatement(Expression condition)
        {
            Condition = condition;
            _trueStatement = new List<Statement>();
            _falseStatement = new List<Statement>();
            _elseIfSections = new List<ElseIfSection>();
        }


        public IfElseStatement(Expression condition, Statement trueStatement)
            : this(condition)
        {
            _trueStatement.Add(Statement.CheckNull(trueStatement));
        }


        public IfElseStatement(Expression condition, Statement trueStatement, Statement falseStatement)
            : this(condition)
        {
            _trueStatement.Add(Statement.CheckNull(trueStatement));
            _falseStatement.Add(Statement.CheckNull(falseStatement));
        }

        public bool HasElseStatements
        {
            get
            {
                return _falseStatement.Count > 0;
            }
        }

        public bool HasElseIfSections
        {
            get
            {
                return _elseIfSections.Count > 0;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitIfElseStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[IfElseStatement Condition={0} TrueStatement={1} FalseStatement={2} ElseIfSection" +
                    "s={3}]", Condition, GetCollectionString(TrueStatement), GetCollectionString(FalseStatement), GetCollectionString(ElseIfSections));
        }
    }

    public class IndexerDeclaration : AttributedNode
    {
        private List<ParameterDeclarationExpression> _parameters;

        private List<InterfaceImplementation> _interfaceImplementations;

        private TypeReference _typeReference;

        private Location _bodyStart;

        private Location _bodyEnd;

        private PropertyGetRegion _getRegion;

        private PropertySetRegion _setRegion;

        public List<ParameterDeclarationExpression> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                _parameters = value ?? new List<ParameterDeclarationExpression>();
            }
        }

        public List<InterfaceImplementation> InterfaceImplementations
        {
            get
            {
                return _interfaceImplementations;
            }
            set
            {
                _interfaceImplementations = value ?? new List<InterfaceImplementation>();
            }
        }

        public TypeReference TypeReference
        {
            get
            {
                return _typeReference;
            }
            set
            {
                _typeReference = value ?? TypeReference.Null;
            }
        }

        public Location BodyStart
        {
            get
            {
                return _bodyStart;
            }
            set
            {
                _bodyStart = value;
            }
        }

        public Location BodyEnd
        {
            get
            {
                return _bodyEnd;
            }
            set
            {
                _bodyEnd = value;
            }
        }

        public PropertyGetRegion GetRegion
        {
            get
            {
                return _getRegion;
            }
            set
            {
                _getRegion = value ?? PropertyGetRegion.Null;
            }
        }

        public PropertySetRegion SetRegion
        {
            get
            {
                return _setRegion;
            }
            set
            {
                _setRegion = value ?? PropertySetRegion.Null;
            }
        }

        public IndexerDeclaration(Modifiers modifier, List<ParameterDeclarationExpression> parameters, List<AttributeSection> attributes) :
                base(attributes)
        {
            Modifier = modifier;
            Parameters = parameters;
            _interfaceImplementations = new List<InterfaceImplementation>();
            _typeReference = TypeReference.Null;
            _bodyStart = Location.Empty;
            _bodyEnd = Location.Empty;
            _getRegion = PropertyGetRegion.Null;
            _setRegion = PropertySetRegion.Null;
        }

        public IndexerDeclaration(TypeReference typeReference, List<ParameterDeclarationExpression> parameters, Modifiers modifier, List<AttributeSection> attributes) :
                base(attributes)
        {
            TypeReference = typeReference;
            Parameters = parameters;
            Modifier = modifier;
            _interfaceImplementations = new List<InterfaceImplementation>();
            _bodyStart = Location.Empty;
            _bodyEnd = Location.Empty;
            _getRegion = PropertyGetRegion.Null;
            _setRegion = PropertySetRegion.Null;
        }

        public bool HasSetRegion
        {
            get
            {
                return !_setRegion.IsNull;
            }
        }

        public bool IsReadOnly
        {
            get
            {
                return HasGetRegion && !HasSetRegion;
            }
        }

        public bool IsWriteOnly
        {
            get
            {
                return !HasGetRegion && HasSetRegion;
            }
        }

        public bool HasGetRegion
        {
            get
            {
                return !_getRegion.IsNull;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitIndexerDeclaration(this, data);
        }

        public override string ToString()
        {
            return string.Format("[IndexerDeclaration Parameters={0} InterfaceImplementations={1} TypeReference={2}" +
                    " BodyStart={3} BodyEnd={4} GetRegion={5} SetRegion={6} Attributes={7} Modifier={" +
                    "8}]", GetCollectionString(Parameters), GetCollectionString(InterfaceImplementations), TypeReference, BodyStart, BodyEnd, GetRegion, SetRegion, GetCollectionString(Attributes), Modifier);
        }
    }

    public class IndexerExpression : Expression
    {
        private Expression _targetObject;

        private List<Expression> _indexes;

        public Expression TargetObject
        {
            get
            {
                return _targetObject;
            }
            set
            {
                _targetObject = value ?? Expression.Null;
                if (!_targetObject.IsNull) _targetObject.Parent = this;
            }
        }

        public List<Expression> Indexes
        {
            get
            {
                return _indexes;
            }
            set
            {
                _indexes = value ?? new List<Expression>();
            }
        }

        public IndexerExpression(Expression targetObject, List<Expression> indexes)
        {
            TargetObject = targetObject;
            Indexes = indexes;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitIndexerExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[IndexerExpression TargetObject={0} Indexes={1}]", TargetObject, GetCollectionString(Indexes));
        }
    }

    public class InterfaceImplementation : AbstractNode
    {
        private TypeReference _interfaceType;

        private string _memberName;

        public TypeReference InterfaceType
        {
            get
            {
                return _interfaceType;
            }
            set
            {
                _interfaceType = value ?? TypeReference.Null;
            }
        }

        public string MemberName
        {
            get
            {
                return _memberName;
            }
            set
            {
                _memberName = string.IsNullOrEmpty(value) ? "?" : value;
            }
        }

        public InterfaceImplementation(TypeReference interfaceType, string memberName)
        {
            InterfaceType = interfaceType;
            MemberName = memberName;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitInterfaceImplementation(this, data);
        }

        public override string ToString()
        {
            return string.Format("[InterfaceImplementation InterfaceType={0} MemberName={1}]", InterfaceType, MemberName);
        }
    }

    public class InvocationExpression : Expression
    {
        private Expression _targetObject;

        private List<Expression> _arguments;

        private List<TypeReference> _typeArguments;

        public Expression TargetObject
        {
            get
            {
                return _targetObject;
            }
            set
            {
                _targetObject = value ?? Expression.Null;
                if (!_targetObject.IsNull) _targetObject.Parent = this;
            }
        }

        public List<Expression> Arguments
        {
            get
            {
                return _arguments;
            }
            set
            {
                _arguments = value ?? new List<Expression>();
            }
        }

        public List<TypeReference> TypeArguments
        {
            get
            {
                return _typeArguments;
            }
            set
            {
                _typeArguments = value ?? new List<TypeReference>();
            }
        }

        public InvocationExpression(Expression targetObject)
        {
            TargetObject = targetObject;
            _arguments = new List<Expression>();
            _typeArguments = new List<TypeReference>();
        }

        public InvocationExpression(Expression targetObject, List<Expression> arguments)
        {
            TargetObject = targetObject;
            Arguments = arguments;
            _typeArguments = new List<TypeReference>();
        }

        public InvocationExpression(Expression targetObject, List<Expression> arguments, List<TypeReference> typeArguments)
        {
            TargetObject = targetObject;
            Arguments = arguments;
            TypeArguments = typeArguments;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitInvocationExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[InvocationExpression TargetObject={0} Arguments={1} TypeArguments={2}]", TargetObject, GetCollectionString(Arguments), GetCollectionString(TypeArguments));
        }
    }

    public class LabelStatement : Statement
    {
        private string _label;

        public string Label
        {
            get
            {
                return _label;
            }
            set
            {
                _label = value ?? "";
            }
        }

        public LabelStatement(string label)
        {
            Label = label;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitLabelStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[LabelStatement Label={0}]", Label);
        }
    }

    public class LockStatement : StatementWithEmbeddedStatement
    {
        private Expression _lockExpression;

        public Expression LockExpression
        {
            get
            {
                return _lockExpression;
            }
            set
            {
                _lockExpression = value ?? Expression.Null;
                if (!_lockExpression.IsNull) _lockExpression.Parent = this;
            }
        }

        public LockStatement(Expression lockExpression, Statement embeddedStatement)
        {
            LockExpression = lockExpression;
            EmbeddedStatement = embeddedStatement;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitLockStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[LockStatement LockExpression={0} EmbeddedStatement={1}]", LockExpression, EmbeddedStatement);
        }
    }

    public class MethodDeclaration : ParametrizedNode
    {
        private TypeReference _typeReference;

        private BlockStatement _body;

        private List<string> _handlesClause;

        private List<InterfaceImplementation> _interfaceImplementations;

        private List<TemplateDefinition> _templates;

        public TypeReference TypeReference
        {
            get
            {
                return _typeReference;
            }
            set
            {
                _typeReference = value ?? TypeReference.Null;
            }
        }

        public BlockStatement Body
        {
            get
            {
                return _body;
            }
            set
            {
                _body = value ?? BlockStatement.Null;
                if (!_body.IsNull) _body.Parent = this;
            }
        }

        public List<string> HandlesClause
        {
            get
            {
                return _handlesClause;
            }
            set
            {
                _handlesClause = value ?? new List<String>();
            }
        }

        public List<InterfaceImplementation> InterfaceImplementations
        {
            get
            {
                return _interfaceImplementations;
            }
            set
            {
                _interfaceImplementations = value ?? new List<InterfaceImplementation>();
            }
        }

        public List<TemplateDefinition> Templates
        {
            get
            {
                return _templates;
            }
            set
            {
                _templates = value ?? new List<TemplateDefinition>();
            }
        }

        public MethodDeclaration(string name, Modifiers modifier, TypeReference typeReference, List<ParameterDeclarationExpression> parameters, List<AttributeSection> attributes) :
                base(modifier, attributes, name, parameters)
        {
            TypeReference = typeReference;
            _body = BlockStatement.Null;
            _handlesClause = new List<String>();
            _interfaceImplementations = new List<InterfaceImplementation>();
            _templates = new List<TemplateDefinition>();
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitMethodDeclaration(this, data);
        }

        public override string ToString()
        {
            return string.Format("[MethodDeclaration TypeReference={0} Body={1} HandlesClause={2} InterfaceImplemen" +
                    "tations={3} Templates={4} Name={5} Parameters={6} Attributes={7} Modifier={8}]", TypeReference, Body, GetCollectionString(HandlesClause), GetCollectionString(InterfaceImplementations), GetCollectionString(Templates), Name, GetCollectionString(Parameters), GetCollectionString(Attributes), Modifier);
        }
    }

    public class NamedArgumentExpression : Expression
    {
        private string _name;

        private Expression _expression;

        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value ?? "";
            }
        }

        public Expression Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                _expression = value ?? Expression.Null;
                if (!_expression.IsNull) _expression.Parent = this;
            }
        }

        public NamedArgumentExpression(string name, Expression expression)
        {
            Name = name;
            Expression = expression;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitNamedArgumentExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[NamedArgumentExpression Name={0} Expression={1}]", Name, Expression);
        }
    }

    public class NamespaceDeclaration : AbstractNode
    {
        private string _name;

        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value ?? "";
            }
        }

        public NamespaceDeclaration(string name)
        {
            Name = name;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitNamespaceDeclaration(this, data);
        }

        public override string ToString()
        {
            return string.Format("[NamespaceDeclaration Name={0}]", Name);
        }
    }

    public class ObjectCreateExpression : Expression
    {
        private TypeReference _createType;

        private List<Expression> _parameters;

        public TypeReference CreateType
        {
            get
            {
                return _createType;
            }
            set
            {
                _createType = value ?? TypeReference.Null;
            }
        }

        public List<Expression> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                _parameters = value ?? new List<Expression>();
            }
        }

        public ObjectCreateExpression(TypeReference createType, List<Expression> parameters)
        {
            CreateType = createType;
            Parameters = parameters;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitObjectCreateExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ObjectCreateExpression CreateType={0} Parameters={1}]", CreateType, GetCollectionString(Parameters));
        }
    }

    public class OnErrorStatement : StatementWithEmbeddedStatement
    {
        public OnErrorStatement(Statement embeddedStatement)
        {
            EmbeddedStatement = embeddedStatement;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitOnErrorStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[OnErrorStatement EmbeddedStatement={0}]", EmbeddedStatement);
        }
    }

    public class OperatorDeclaration : MethodDeclaration
    {
        private ConversionType _conversionType;

        private List<AttributeSection> _returnTypeAttributes;

        private OverloadableOperatorType _overloadableOperator;

        public ConversionType ConversionType
        {
            get
            {
                return _conversionType;
            }
            set
            {
                _conversionType = value;
            }
        }

        public List<AttributeSection> ReturnTypeAttributes
        {
            get
            {
                return _returnTypeAttributes;
            }
            set
            {
                _returnTypeAttributes = value ?? new List<AttributeSection>();
            }
        }

        public OverloadableOperatorType OverloadableOperator
        {
            get
            {
                return _overloadableOperator;
            }
            set
            {
                _overloadableOperator = value;
            }
        }

        public OperatorDeclaration(Modifiers modifier, List<AttributeSection> attributes, List<ParameterDeclarationExpression> parameters, TypeReference typeReference, ConversionType conversionType) :
                base(null, modifier, typeReference, parameters, attributes)
        {
            ConversionType = conversionType;
            _returnTypeAttributes = new List<AttributeSection>();
        }

        public OperatorDeclaration(Modifiers modifier, List<AttributeSection> attributes, List<ParameterDeclarationExpression> parameters, TypeReference typeReference, OverloadableOperatorType overloadableOperator) :
                base(null, modifier, typeReference, parameters, attributes)
        {
            OverloadableOperator = overloadableOperator;
            _returnTypeAttributes = new List<AttributeSection>();
        }

        public bool IsConversionOperator
        {
            get
            {
                return _conversionType != ConversionType.None;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitOperatorDeclaration(this, data);
        }

        public override string ToString()
        {
            return string.Format("[OperatorDeclaration ConversionType={0} ReturnTypeAttributes={1} OverloadableOper" +
                    "ator={2} TypeReference={3} Body={4} HandlesClause={5} InterfaceImplementations={" +
                    "6} Templates={7} Name={8} Parameters={9} Attributes={10} Modifier={11}]", ConversionType, GetCollectionString(ReturnTypeAttributes), OverloadableOperator, TypeReference, Body, GetCollectionString(HandlesClause), GetCollectionString(InterfaceImplementations), GetCollectionString(Templates), Name, GetCollectionString(Parameters), GetCollectionString(Attributes), Modifier);
        }
    }

    public class OptionDeclaration : AbstractNode
    {
        private OptionType _optionType;

        private bool _optionValue;

        public OptionType OptionType
        {
            get
            {
                return _optionType;
            }
            set
            {
                _optionType = value;
            }
        }

        public bool OptionValue
        {
            get
            {
                return _optionValue;
            }
            set
            {
                _optionValue = value;
            }
        }

        public OptionDeclaration(OptionType optionType, bool optionValue)
        {
            OptionType = optionType;
            OptionValue = optionValue;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitOptionDeclaration(this, data);
        }

        public override string ToString()
        {
            return string.Format("[OptionDeclaration OptionType={0} OptionValue={1}]", OptionType, OptionValue);
        }
    }

    public class ParameterDeclarationExpression : Expression
    {
        private List<AttributeSection> _attributes;

        private string _parameterName;

        private TypeReference _typeReference;

        private ParameterModifiers _paramModifier;

        private Expression _defaultValue;

        public List<AttributeSection> Attributes
        {
            get
            {
                return _attributes;
            }
            set
            {
                _attributes = value ?? new List<AttributeSection>();
            }
        }

        public string ParameterName
        {
            get
            {
                return _parameterName;
            }
            set
            {
                _parameterName = string.IsNullOrEmpty(value) ? "?" : value;
            }
        }

        public TypeReference TypeReference
        {
            get
            {
                return _typeReference;
            }
            set
            {
                _typeReference = value ?? TypeReference.Null;
            }
        }

        public ParameterModifiers ParamModifier
        {
            get
            {
                return _paramModifier;
            }
            set
            {
                _paramModifier = value;
            }
        }

        public Expression DefaultValue
        {
            get
            {
                return _defaultValue;
            }
            set
            {
                _defaultValue = value ?? Expression.Null;
                if (!_defaultValue.IsNull) _defaultValue.Parent = this;
            }
        }

        public ParameterDeclarationExpression(TypeReference typeReference, string parameterName)
        {
            TypeReference = typeReference;
            ParameterName = parameterName;
            _attributes = new List<AttributeSection>();
            _defaultValue = Expression.Null;
        }

        public ParameterDeclarationExpression(TypeReference typeReference, string parameterName, ParameterModifiers paramModifier)
        {
            TypeReference = typeReference;
            ParameterName = parameterName;
            ParamModifier = paramModifier;
            _attributes = new List<AttributeSection>();
            _defaultValue = Expression.Null;
        }

        public ParameterDeclarationExpression(TypeReference typeReference, string parameterName, ParameterModifiers paramModifier, Expression defaultValue)
        {
            TypeReference = typeReference;
            ParameterName = parameterName;
            ParamModifier = paramModifier;
            DefaultValue = defaultValue;
            _attributes = new List<AttributeSection>();
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitParameterDeclarationExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ParameterDeclarationExpression Attributes={0} ParameterName={1} TypeReference={2" +
                    "} ParamModifier={3} DefaultValue={4}]", GetCollectionString(Attributes), ParameterName, TypeReference, ParamModifier, DefaultValue);
        }
    }

    public abstract class ParametrizedNode : AttributedNode
    {
        private string _name;

        private List<ParameterDeclarationExpression> _parameters;

        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value ?? "";
            }
        }

        public List<ParameterDeclarationExpression> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                _parameters = value ?? new List<ParameterDeclarationExpression>();
            }
        }

        protected ParametrizedNode(Modifiers modifier, List<AttributeSection> attributes, string name, List<ParameterDeclarationExpression> parameters) :
                base(attributes)
        {
            Modifier = modifier;
            Name = name;
            Parameters = parameters;
        }

        protected ParametrizedNode(Modifiers modifier, List<AttributeSection> attributes) :
                base(attributes)
        {
            Modifier = modifier;
            _name = "";
            _parameters = new List<ParameterDeclarationExpression>();
        }
    }

    public class ParenthesizedExpression : Expression
    {
        private Expression _expression;

        public Expression Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                _expression = value ?? Expression.Null;
                if (!_expression.IsNull) _expression.Parent = this;
            }
        }

        public ParenthesizedExpression(Expression expression)
        {
            Expression = expression;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitParenthesizedExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ParenthesizedExpression Expression={0}]", Expression);
        }
    }

    public class PointerReferenceExpression : Expression
    {
        private Expression _targetObject;

        private string _identifier;

        public Expression TargetObject
        {
            get
            {
                return _targetObject;
            }
            set
            {
                _targetObject = value ?? Expression.Null;
                if (!_targetObject.IsNull) _targetObject.Parent = this;
            }
        }

        public string Identifier
        {
            get
            {
                return _identifier;
            }
            set
            {
                _identifier = value ?? "";
            }
        }

        public PointerReferenceExpression(Expression targetObject, string identifier)
        {
            TargetObject = targetObject;
            Identifier = identifier;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitPointerReferenceExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[PointerReferenceExpression TargetObject={0} Identifier={1}]", TargetObject, Identifier);
        }
    }

    public class PropertyDeclaration : ParametrizedNode
    {
        private List<InterfaceImplementation> _interfaceImplementations;

        private TypeReference _typeReference;

        private Location _bodyStart;

        private Location _bodyEnd;

        private PropertyGetRegion _getRegion;

        private PropertySetRegion _setRegion;

        public List<InterfaceImplementation> InterfaceImplementations
        {
            get
            {
                return _interfaceImplementations;
            }
            set
            {
                _interfaceImplementations = value ?? new List<InterfaceImplementation>();
            }
        }

        public TypeReference TypeReference
        {
            get
            {
                return _typeReference;
            }
            set
            {
                _typeReference = value ?? TypeReference.Null;
            }
        }

        public Location BodyStart
        {
            get
            {
                return _bodyStart;
            }
            set
            {
                _bodyStart = value;
            }
        }

        public Location BodyEnd
        {
            get
            {
                return _bodyEnd;
            }
            set
            {
                _bodyEnd = value;
            }
        }

        public PropertyGetRegion GetRegion
        {
            get
            {
                return _getRegion;
            }
            set
            {
                _getRegion = value ?? PropertyGetRegion.Null;
            }
        }

        public PropertySetRegion SetRegion
        {
            get
            {
                return _setRegion;
            }
            set
            {
                _setRegion = value ?? PropertySetRegion.Null;
            }
        }

        public PropertyDeclaration(Modifiers modifier, List<AttributeSection> attributes, string name, List<ParameterDeclarationExpression> parameters) :
                base(modifier, attributes, name, parameters)
        {
            _interfaceImplementations = new List<InterfaceImplementation>();
            _typeReference = TypeReference.Null;
            _bodyStart = Location.Empty;
            _bodyEnd = Location.Empty;
            _getRegion = PropertyGetRegion.Null;
            _setRegion = PropertySetRegion.Null;
        }

        public bool HasGetRegion
        {
            get
            {
                return !_getRegion.IsNull;
            }
        }

        public bool IsWriteOnly
        {
            get
            {
                return !HasGetRegion && HasSetRegion;
            }
        }


        internal PropertyDeclaration(string name, TypeReference typeReference, Modifiers modifier, List<AttributeSection> attributes) : this(modifier, attributes, name, null)
        {
            this.TypeReference = typeReference;
            if ((modifier & Modifiers.ReadOnly) != Modifiers.ReadOnly)
            {
                this.SetRegion = new PropertySetRegion(null, null);
            }
            if ((modifier & Modifiers.WriteOnly) != Modifiers.WriteOnly)
            {
                this.GetRegion = new PropertyGetRegion(null, null);
            }
        }

        public bool HasSetRegion
        {
            get
            {
                return !_setRegion.IsNull;
            }
        }

        public bool IsReadOnly
        {
            get
            {
                return HasGetRegion && !HasSetRegion;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitPropertyDeclaration(this, data);
        }

        public override string ToString()
        {
            return string.Format("[PropertyDeclaration InterfaceImplementations={0} TypeReference={1} BodyStart={2}" +
                    " BodyEnd={3} GetRegion={4} SetRegion={5} Name={6} Parameters={7} Attributes={8} " +
                    "Modifier={9}]", GetCollectionString(InterfaceImplementations), TypeReference, BodyStart, BodyEnd, GetRegion, SetRegion, Name, GetCollectionString(Parameters), GetCollectionString(Attributes), Modifier);
        }
    }

    public class PropertyGetRegion : PropertyGetSetRegion
    {
        public PropertyGetRegion(BlockStatement block, List<AttributeSection> attributes) :
                base(block, attributes)
        {
        }

        public static PropertyGetRegion Null
        {
            get
            {
                return NullPropertyGetRegion.Instance;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitPropertyGetRegion(this, data);
        }

        public override string ToString()
        {
            return string.Format("[PropertyGetRegion Block={0} Attributes={1} Modifier={2}]", Block, GetCollectionString(Attributes), Modifier);
        }
    }

    public class NullPropertyGetRegion : PropertyGetRegion
    {
        private NullPropertyGetRegion() :
                base(null, null)
        {
        }

        private static NullPropertyGetRegion s_instance = new NullPropertyGetRegion();

        public static NullPropertyGetRegion Instance
        {
            get
            {
                return s_instance;
            }
        }

        public override bool IsNull
        {
            get
            {
                return true;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return null;
        }

        public override string ToString()
        {
            return "[NullPropertyGetRegion]";
        }
    }

    public abstract class PropertyGetSetRegion : AttributedNode, INullable
    {
        private BlockStatement _block;

        public BlockStatement Block
        {
            get
            {
                return _block;
            }
            set
            {
                _block = value ?? BlockStatement.Null;
                if (!_block.IsNull) _block.Parent = this;
            }
        }

        protected PropertyGetSetRegion(BlockStatement block, List<AttributeSection> attributes) :
                base(attributes)
        {
            Block = block;
        }

        public virtual bool IsNull
        {
            get
            {
                return false;
            }
        }
    }

    public class PropertySetRegion : PropertyGetSetRegion
    {
        private List<ParameterDeclarationExpression> _parameters;

        public List<ParameterDeclarationExpression> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                _parameters = value ?? new List<ParameterDeclarationExpression>();
            }
        }

        public PropertySetRegion(BlockStatement block, List<AttributeSection> attributes) :
                base(block, attributes)
        {
            _parameters = new List<ParameterDeclarationExpression>();
        }

        public static PropertySetRegion Null
        {
            get
            {
                return NullPropertySetRegion.Instance;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitPropertySetRegion(this, data);
        }

        public override string ToString()
        {
            return string.Format("[PropertySetRegion Parameters={0} Block={1} Attributes={2} Modifier={3}]", GetCollectionString(Parameters), Block, GetCollectionString(Attributes), Modifier);
        }
    }

    public class NullPropertySetRegion : PropertySetRegion
    {
        private NullPropertySetRegion() :
                base(null, null)
        {
        }

        private static NullPropertySetRegion s_instance = new NullPropertySetRegion();

        public static NullPropertySetRegion Instance
        {
            get
            {
                return s_instance;
            }
        }

        public override bool IsNull
        {
            get
            {
                return true;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return null;
        }

        public override string ToString()
        {
            return "[NullPropertySetRegion]";
        }
    }

    public class RaiseEventStatement : Statement
    {
        private string _eventName;

        private List<Expression> _arguments;

        public string EventName
        {
            get
            {
                return _eventName;
            }
            set
            {
                _eventName = value ?? "";
            }
        }

        public List<Expression> Arguments
        {
            get
            {
                return _arguments;
            }
            set
            {
                _arguments = value ?? new List<Expression>();
            }
        }

        public RaiseEventStatement(string eventName, List<Expression> arguments)
        {
            EventName = eventName;
            Arguments = arguments;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitRaiseEventStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[RaiseEventStatement EventName={0} Arguments={1}]", EventName, GetCollectionString(Arguments));
        }
    }

    public class ReDimStatement : Statement
    {
        private List<InvocationExpression> _reDimClauses;

        private bool _isPreserve;

        public List<InvocationExpression> ReDimClauses
        {
            get
            {
                return _reDimClauses;
            }
            set
            {
                _reDimClauses = value ?? new List<InvocationExpression>();
            }
        }

        public bool IsPreserve
        {
            get
            {
                return _isPreserve;
            }
            set
            {
                _isPreserve = value;
            }
        }

        public ReDimStatement(bool isPreserve)
        {
            IsPreserve = isPreserve;
            _reDimClauses = new List<InvocationExpression>();
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitReDimStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ReDimStatement ReDimClauses={0} IsPreserve={1}]", GetCollectionString(ReDimClauses), IsPreserve);
        }
    }

    public class RemoveHandlerStatement : Statement
    {
        private Expression _eventExpression;

        private Expression _handlerExpression;

        public Expression EventExpression
        {
            get
            {
                return _eventExpression;
            }
            set
            {
                _eventExpression = value ?? Expression.Null;
                if (!_eventExpression.IsNull) _eventExpression.Parent = this;
            }
        }

        public Expression HandlerExpression
        {
            get
            {
                return _handlerExpression;
            }
            set
            {
                _handlerExpression = value ?? Expression.Null;
                if (!_handlerExpression.IsNull) _handlerExpression.Parent = this;
            }
        }

        public RemoveHandlerStatement(Expression eventExpression, Expression handlerExpression)
        {
            EventExpression = eventExpression;
            HandlerExpression = handlerExpression;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitRemoveHandlerStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[RemoveHandlerStatement EventExpression={0} HandlerExpression={1}]", EventExpression, HandlerExpression);
        }
    }

    public class ResumeStatement : Statement
    {
        private string _labelName;

        private bool _isResumeNext;

        public string LabelName
        {
            get
            {
                return _labelName;
            }
            set
            {
                _labelName = value ?? "";
            }
        }

        public bool IsResumeNext
        {
            get
            {
                return _isResumeNext;
            }
            set
            {
                _isResumeNext = value;
            }
        }

        public ResumeStatement(bool isResumeNext)
        {
            IsResumeNext = isResumeNext;
            _labelName = "";
        }

        public ResumeStatement(string labelName)
        {
            LabelName = labelName;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitResumeStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ResumeStatement LabelName={0} IsResumeNext={1}]", LabelName, IsResumeNext);
        }
    }

    public class ReturnStatement : Statement
    {
        private Expression _expression;

        public Expression Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                _expression = value ?? Expression.Null;
                if (!_expression.IsNull) _expression.Parent = this;
            }
        }

        public ReturnStatement(Expression expression)
        {
            Expression = expression;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitReturnStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ReturnStatement Expression={0}]", Expression);
        }
    }

    public class SizeOfExpression : Expression
    {
        private TypeReference _typeReference;

        public TypeReference TypeReference
        {
            get
            {
                return _typeReference;
            }
            set
            {
                _typeReference = value ?? TypeReference.Null;
            }
        }

        public SizeOfExpression(TypeReference typeReference)
        {
            TypeReference = typeReference;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitSizeOfExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[SizeOfExpression TypeReference={0}]", TypeReference);
        }
    }

    public class StackAllocExpression : Expression
    {
        private TypeReference _typeReference;

        private Expression _expression;

        public TypeReference TypeReference
        {
            get
            {
                return _typeReference;
            }
            set
            {
                _typeReference = value ?? TypeReference.Null;
            }
        }

        public Expression Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                _expression = value ?? Expression.Null;
                if (!_expression.IsNull) _expression.Parent = this;
            }
        }

        public StackAllocExpression(TypeReference typeReference, Expression expression)
        {
            TypeReference = typeReference;
            Expression = expression;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitStackAllocExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[StackAllocExpression TypeReference={0} Expression={1}]", TypeReference, Expression);
        }
    }

    public class StopStatement : Statement
    {
        public StopStatement()
        {
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitStopStatement(this, data);
        }

        public override string ToString()
        {
            return "[StopStatement]";
        }
    }

    public class SwitchSection : BlockStatement
    {
        private List<CaseLabel> _switchLabels;

        public List<CaseLabel> SwitchLabels
        {
            get
            {
                return _switchLabels;
            }
            set
            {
                _switchLabels = value ?? new List<CaseLabel>();
            }
        }

        public SwitchSection()
        {
            _switchLabels = new List<CaseLabel>();
        }

        public SwitchSection(List<CaseLabel> switchLabels)
        {
            SwitchLabels = switchLabels;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitSwitchSection(this, data);
        }

        public override string ToString()
        {
            return string.Format("[SwitchSection SwitchLabels={0}]", GetCollectionString(SwitchLabels));
        }
    }

    public class SwitchStatement : Statement
    {
        private Expression _switchExpression;

        private List<SwitchSection> _switchSections;

        public Expression SwitchExpression
        {
            get
            {
                return _switchExpression;
            }
            set
            {
                _switchExpression = value ?? Expression.Null;
                if (!_switchExpression.IsNull) _switchExpression.Parent = this;
            }
        }

        public List<SwitchSection> SwitchSections
        {
            get
            {
                return _switchSections;
            }
            set
            {
                _switchSections = value ?? new List<SwitchSection>();
            }
        }

        public SwitchStatement(Expression switchExpression, List<SwitchSection> switchSections)
        {
            SwitchExpression = switchExpression;
            SwitchSections = switchSections;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitSwitchStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[SwitchStatement SwitchExpression={0} SwitchSections={1}]", SwitchExpression, GetCollectionString(SwitchSections));
        }
    }

    public class TemplateDefinition : AttributedNode
    {
        private string _name;

        private List<TypeReference> _bases;

        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = string.IsNullOrEmpty(value) ? "?" : value;
            }
        }

        public List<TypeReference> Bases
        {
            get
            {
                return _bases;
            }
            set
            {
                _bases = value ?? new List<TypeReference>();
            }
        }

        public TemplateDefinition(string name, List<AttributeSection> attributes) :
                base(attributes)
        {
            Name = name;
            _bases = new List<TypeReference>();
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitTemplateDefinition(this, data);
        }

        public override string ToString()
        {
            return string.Format("[TemplateDefinition Name={0} Bases={1} Attributes={2} Modifier={3}]", Name, GetCollectionString(Bases), GetCollectionString(Attributes), Modifier);
        }
    }

    public class ThisReferenceExpression : Expression
    {
        public ThisReferenceExpression()
        {
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitThisReferenceExpression(this, data);
        }

        public override string ToString()
        {
            return "[ThisReferenceExpression]";
        }
    }

    public class ThrowStatement : Statement
    {
        private Expression _expression;

        public Expression Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                _expression = value ?? Expression.Null;
                if (!_expression.IsNull) _expression.Parent = this;
            }
        }

        public ThrowStatement(Expression expression)
        {
            Expression = expression;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitThrowStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[ThrowStatement Expression={0}]", Expression);
        }
    }

    public class TryCatchStatement : Statement
    {
        private Statement _statementBlock;

        private List<CatchClause> _catchClauses;

        private Statement _finallyBlock;

        public Statement StatementBlock
        {
            get
            {
                return _statementBlock;
            }
            set
            {
                _statementBlock = value ?? Statement.Null;
                if (!_statementBlock.IsNull) _statementBlock.Parent = this;
            }
        }

        public List<CatchClause> CatchClauses
        {
            get
            {
                return _catchClauses;
            }
            set
            {
                _catchClauses = value ?? new List<CatchClause>();
            }
        }

        public Statement FinallyBlock
        {
            get
            {
                return _finallyBlock;
            }
            set
            {
                _finallyBlock = value ?? Statement.Null;
                if (!_finallyBlock.IsNull) _finallyBlock.Parent = this;
            }
        }

        public TryCatchStatement(Statement statementBlock, List<CatchClause> catchClauses, Statement finallyBlock)
        {
            StatementBlock = statementBlock;
            CatchClauses = catchClauses;
            FinallyBlock = finallyBlock;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitTryCatchStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[TryCatchStatement StatementBlock={0} CatchClauses={1} FinallyBlock={2}]", StatementBlock, GetCollectionString(CatchClauses), FinallyBlock);
        }
    }

    public class TypeDeclaration : AttributedNode
    {
        private string _name;

        private ClassType _type;

        private List<TypeReference> _baseTypes;

        private List<TemplateDefinition> _templates;

        private Location _bodyStartLocation;

        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value ?? "";
            }
        }

        public ClassType Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }

        public List<TypeReference> BaseTypes
        {
            get
            {
                return _baseTypes;
            }
            set
            {
                _baseTypes = value ?? new List<TypeReference>();
            }
        }

        public List<TemplateDefinition> Templates
        {
            get
            {
                return _templates;
            }
            set
            {
                _templates = value ?? new List<TemplateDefinition>();
            }
        }

        public Location BodyStartLocation
        {
            get
            {
                return _bodyStartLocation;
            }
            set
            {
                _bodyStartLocation = value;
            }
        }

        public TypeDeclaration(Modifiers modifier, List<AttributeSection> attributes) :
                base(attributes)
        {
            Modifier = modifier;
            _name = "";
            _baseTypes = new List<TypeReference>();
            _templates = new List<TemplateDefinition>();
            _bodyStartLocation = Location.Empty;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitTypeDeclaration(this, data);
        }

        public override string ToString()
        {
            return string.Format("[TypeDeclaration Name={0} Type={1} BaseTypes={2} Templates={3} BodyStartLocation=" +
                    "{4} Attributes={5} Modifier={6}]", Name, Type, GetCollectionString(BaseTypes), GetCollectionString(Templates), BodyStartLocation, GetCollectionString(Attributes), Modifier);
        }
    }

    public class TypeOfExpression : Expression
    {
        private TypeReference _typeReference;

        public TypeReference TypeReference
        {
            get
            {
                return _typeReference;
            }
            set
            {
                _typeReference = value ?? TypeReference.Null;
            }
        }

        public TypeOfExpression(TypeReference typeReference)
        {
            TypeReference = typeReference;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitTypeOfExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[TypeOfExpression TypeReference={0}]", TypeReference);
        }
    }

    public class TypeOfIsExpression : Expression
    {
        private Expression _expression;

        private TypeReference _typeReference;

        public Expression Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                _expression = value ?? Expression.Null;
                if (!_expression.IsNull) _expression.Parent = this;
            }
        }

        public TypeReference TypeReference
        {
            get
            {
                return _typeReference;
            }
            set
            {
                _typeReference = value ?? TypeReference.Null;
            }
        }

        public TypeOfIsExpression(Expression expression, TypeReference typeReference)
        {
            Expression = expression;
            TypeReference = typeReference;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitTypeOfIsExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[TypeOfIsExpression Expression={0} TypeReference={1}]", Expression, TypeReference);
        }
    }

    public class TypeReferenceExpression : Expression
    {
        private TypeReference _typeReference;

        public TypeReference TypeReference
        {
            get
            {
                return _typeReference;
            }
            set
            {
                _typeReference = value ?? TypeReference.Null;
            }
        }

        public TypeReferenceExpression(TypeReference typeReference)
        {
            TypeReference = typeReference;
        }

        public TypeReferenceExpression(string typeName) : this(new TypeReference(typeName)) { }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitTypeReferenceExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[TypeReferenceExpression TypeReference={0}]", TypeReference);
        }
    }

    public class UnaryOperatorExpression : Expression
    {
        private UnaryOperatorType _op;

        private Expression _expression;

        public UnaryOperatorType Op
        {
            get
            {
                return _op;
            }
            set
            {
                _op = value;
            }
        }

        public Expression Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                _expression = value ?? Expression.Null;
                if (!_expression.IsNull) _expression.Parent = this;
            }
        }

        public UnaryOperatorExpression(UnaryOperatorType op)
        {
            Op = op;
            _expression = Expression.Null;
        }

        public UnaryOperatorExpression(Expression expression, UnaryOperatorType op)
        {
            Expression = expression;
            Op = op;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitUnaryOperatorExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[UnaryOperatorExpression Op={0} Expression={1}]", Op, Expression);
        }
    }

    public class UncheckedExpression : Expression
    {
        private Expression _expression;

        public Expression Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                _expression = value ?? Expression.Null;
                if (!_expression.IsNull) _expression.Parent = this;
            }
        }

        public UncheckedExpression(Expression expression)
        {
            Expression = expression;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitUncheckedExpression(this, data);
        }

        public override string ToString()
        {
            return string.Format("[UncheckedExpression Expression={0}]", Expression);
        }
    }

    public class UncheckedStatement : Statement
    {
        private Statement _block;

        public Statement Block
        {
            get
            {
                return _block;
            }
            set
            {
                _block = value ?? Statement.Null;
                if (!_block.IsNull) _block.Parent = this;
            }
        }

        public UncheckedStatement(Statement block)
        {
            Block = block;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitUncheckedStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[UncheckedStatement Block={0}]", Block);
        }
    }

    public class UnsafeStatement : Statement
    {
        private Statement _block;

        public Statement Block
        {
            get
            {
                return _block;
            }
            set
            {
                _block = value ?? Statement.Null;
                if (!_block.IsNull) _block.Parent = this;
            }
        }

        public UnsafeStatement(Statement block)
        {
            Block = block;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitUnsafeStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[UnsafeStatement Block={0}]", Block);
        }
    }

    public class Using : AbstractNode
    {
        private string _name;

        private TypeReference _alias;

        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = string.IsNullOrEmpty(value) ? "?" : value;
            }
        }

        public TypeReference Alias
        {
            get
            {
                return _alias;
            }
            set
            {
                _alias = value ?? TypeReference.Null;
            }
        }

        public Using(string name)
        {
            Name = name;
            _alias = TypeReference.Null;
        }

        public Using(string name, TypeReference alias)
        {
            Name = name;
            Alias = alias;
        }

        public bool IsAlias
        {
            get
            {
                return !_alias.IsNull;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitUsing(this, data);
        }

        public override string ToString()
        {
            return string.Format("[Using Name={0} Alias={1}]", Name, Alias);
        }
    }

    public class UsingDeclaration : AbstractNode
    {
        private List<Using> _usings;

        public List<Using> Usings
        {
            get
            {
                return _usings;
            }
            set
            {
                _usings = value ?? new List<Using>();
            }
        }

        public UsingDeclaration(List<Using> usings)
        {
            Usings = usings;
        }

        public UsingDeclaration(string @namespace, TypeReference alias) { _usings = new List<Using>(1); _usings.Add(new Using(@namespace, alias)); }

        public UsingDeclaration(string @namespace) : this(@namespace, null) { }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitUsingDeclaration(this, data);
        }

        public override string ToString()
        {
            return string.Format("[UsingDeclaration Usings={0}]", GetCollectionString(Usings));
        }
    }

    public class UsingStatement : StatementWithEmbeddedStatement
    {
        private Statement _resourceAcquisition;

        public Statement ResourceAcquisition
        {
            get
            {
                return _resourceAcquisition;
            }
            set
            {
                _resourceAcquisition = value ?? Statement.Null;
                if (!_resourceAcquisition.IsNull) _resourceAcquisition.Parent = this;
            }
        }

        public UsingStatement(Statement resourceAcquisition, Statement embeddedStatement)
        {
            ResourceAcquisition = resourceAcquisition;
            EmbeddedStatement = embeddedStatement;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitUsingStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[UsingStatement ResourceAcquisition={0} EmbeddedStatement={1}]", ResourceAcquisition, EmbeddedStatement);
        }
    }

    public class VariableDeclaration : AbstractNode
    {
        private string _name;

        private Expression _initializer;

        private TypeReference _typeReference;

        private Expression _fixedArrayInitialization;

        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value ?? "";
            }
        }

        public Expression Initializer
        {
            get
            {
                return _initializer;
            }
            set
            {
                _initializer = value ?? Expression.Null;
                if (!_initializer.IsNull) _initializer.Parent = this;
            }
        }

        public TypeReference TypeReference
        {
            get
            {
                return _typeReference;
            }
            set
            {
                _typeReference = value ?? TypeReference.Null;
            }
        }

        public Expression FixedArrayInitialization
        {
            get
            {
                return _fixedArrayInitialization;
            }
            set
            {
                _fixedArrayInitialization = value ?? Expression.Null;
                if (!_fixedArrayInitialization.IsNull) _fixedArrayInitialization.Parent = this;
            }
        }

        public VariableDeclaration(string name)
        {
            Name = name;
            _initializer = Expression.Null;
            _typeReference = TypeReference.Null;
            _fixedArrayInitialization = Expression.Null;
        }

        public VariableDeclaration(string name, Expression initializer)
        {
            Name = name;
            Initializer = initializer;
            _typeReference = TypeReference.Null;
            _fixedArrayInitialization = Expression.Null;
        }

        public VariableDeclaration(string name, Expression initializer, TypeReference typeReference)
        {
            Name = name;
            Initializer = initializer;
            TypeReference = typeReference;
            _fixedArrayInitialization = Expression.Null;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitVariableDeclaration(this, data);
        }

        public override string ToString()
        {
            return string.Format("[VariableDeclaration Name={0} Initializer={1} TypeReference={2} FixedArrayInitial" +
                    "ization={3}]", Name, Initializer, TypeReference, FixedArrayInitialization);
        }
    }

    public class WithStatement : Statement
    {
        private Expression _expression;

        private BlockStatement _body;

        public Expression Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                _expression = value ?? Expression.Null;
                if (!_expression.IsNull) _expression.Parent = this;
            }
        }

        public BlockStatement Body
        {
            get
            {
                return _body;
            }
            set
            {
                _body = value ?? BlockStatement.Null;
                if (!_body.IsNull) _body.Parent = this;
            }
        }

        public WithStatement(Expression expression)
        {
            Expression = expression;
            _body = BlockStatement.Null;
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitWithStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[WithStatement Expression={0} Body={1}]", Expression, Body);
        }
    }

    public class YieldStatement : Statement
    {
        private Statement _statement;

        public Statement Statement
        {
            get
            {
                return _statement;
            }
            set
            {
                _statement = value ?? Statement.Null;
                if (!_statement.IsNull) _statement.Parent = this;
            }
        }

        public YieldStatement(Statement statement)
        {
            Statement = statement;
        }

        public bool IsYieldReturn
        {
            get
            {
                return _statement is ReturnStatement;
            }
        }

        public bool IsYieldBreak
        {
            get
            {
                return _statement is BreakStatement;
            }
        }

        public override object AcceptVisitor(IAstVisitor visitor, object data)
        {
            return visitor.VisitYieldStatement(this, data);
        }

        public override string ToString()
        {
            return string.Format("[YieldStatement Statement={0}]", Statement);
        }
    }
}
